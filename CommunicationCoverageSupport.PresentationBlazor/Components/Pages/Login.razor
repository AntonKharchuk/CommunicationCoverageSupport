@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject NavigationManager Nav
@rendermode RenderMode.InteractiveServer

<h3 class="mb-4">Login</h3>

<EditForm Model="loginModel" OnValidSubmit="Submit" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    [SupplyParameterFromForm]
    private UserLoginDto? loginModel { get; set; }

    private string? message;

    protected override void OnInitialized() => loginModel ??= new();

    private async Task Submit()
    {
        if (loginModel is null ||
            string.IsNullOrWhiteSpace(loginModel.Username) ||
            string.IsNullOrWhiteSpace(loginModel.Password))
        {
            message = "Some fields are missing. Please fill in all required fields.";
            return;
        }

        var result = await AuthService.LoginAsync(loginModel);
      
        message = result != null
            ? $"Login successful."
            : "Login failed. Please check your credentials.";
    }
}
